//import { enhance } from '$app/forms';
import placeholdify from "../../lib/utils/placeholdify";
import pluralize from "../../lib/utils/pluralize"
import relativeTimeSince from "../../lib/utils/relativeTimeSince"
import CommentList from "../comments/CommentList.torp"
import LinkPreview from './LinkPreview.torp';
import { ARTICLE_POST_TYPE, IMAGE_POST_TYPE, LINK_POST_TYPE } from "../../lib/constants";
import ChatCircle from "phosphor-torpor/lib/ChatCircle";
import Heart from "phosphor-torpor/lib/Heart";

/**
 * Shows a post's full details.
 */
export default function PostView() {
	let { post, user, follower } = $props.data;

	let fmt = new Intl.DateTimeFormat(undefined, {
		day: "numeric",
		month: "short",
		year: "numeric",
		hour: "numeric",
		minute: "numeric"
	});

	@render {
		<div class="post-view card">
			<:head>
				<meta name="description" content={post.text} />
				<meta property="og:type" content="article" />
				@// <meta property="og:locale" content="en_US" />
				<meta property="og:site_name" content="Social" />
				<meta property="og:title" content={post.type === ARTICLE_POST_TYPE ? post.title : "Social post"} />
				<meta property="og:description" content={post.text} />
				<meta property="og:url" content="{post.author.url}posts/${post.slug}" />
				@// <meta property="og:image" content="" />
				@// <meta property="og:image:width" content="1152" />
				@// <meta property="og:image:height" content="648" />
				@// <meta property="og:image:alt" content="todo" />
				@if (post.publishedAt) {
					<meta property="article:published_time" content={(new Date(post.publishedAt)).toISOString()} />
				}
				@if (post.republishedAt) {
					<meta property="article:modified_time" content={(new Date(post.republishedAt)).toISOString()} />
				}
			</:head>

			<div class="post-view-container">
				<div class="hstack spaced">
					<div style="flex: 0 0 auto">
						<a href={post.author.url}>
							<img class="post-view-image" src={placeholdify(post.author.image)} alt="{post.author.name} ({post.author.url})" />
						</a>
					</div>
					<div style="flex: 1 1 auto">
						<div class="post-view-header hstack centered spaced">
							<a class="post-view-link hstack spaced grow" href={post.author.url}>
								<div class="vstack">
									<div class="post-view-name">
										{post.author.name}
									</div>
									<div class="post-view-url">
										{post.author.url}
									</div>
								</div>
							</a>
							<div class="vstack align-end">
								<div class="post-view-time" title={fmt.format(new Date(post.publishedAt))}>
									{relativeTimeSince(new Date(post.publishedAt))}
								</div>
								@if (user?.url === post.author.url) {
									<a href="{$props.data.base}posts/edit/{post.slug}">Edit</a>
								} else {
									<span>&nbsp;</span>
								}
							</div>
						</div>

						<div class="post-view-body">
							@switch (post.type) {
								case ARTICLE_POST_TYPE: {
									<h3>{post.title}</h3>
									<p style="color: gray">{post.text}</p>
									@html(post.articleText)
								}
								case IMAGE_POST_TYPE: {
									<p>{post.text}</p>
									<img src={post.image} />
								}
								case LINK_POST_TYPE: {
									<p>{post.text}</p>
									<LinkPreview link={post} />
								}
								default: {
									<p>{post.text}</p>
								}
							}
						</div>

						@/*
						@if (post.tags.length) {
							<div class="post-view-tags-container">
								@for (let [i, tag] of post.tags.entries()) {
									@if (i > 0) {
										<span class="separator" />
									}
									<a href="{$props.data.base}tags/{tag}">{tag}</a>
								}
							</div>
						}
						*/

						<div class="post-view-footer hstack centered">
							<span class="hstack centered spaced-text">
								<ChatCircle weight="bold" />
								{post.commentCount}
							</span>
							<span class="hstack centered spaced-text">
								<Heart weight="bold" />
								{post.likeCount}
							</span>
							@if (post.emojiFirst) {
								<span>{post.emojiFirst}</span>
							}
							@if (post.emojiSecond) {
								<span>{post.emojiSecond}</span>
							}
							@if (post.emojiThird) {
								<span>{post.emojiThird}</span>
							}
							@for (let tag of post.tags) {
								<a href="{$props.data.base}tags/{tag.slug}">{tag.text}</a>
							}
						</div>
					</div>
				</div>
			</div>

			<div class="post-view-comments-container">
				<CommentList {post} {user} {follower} comments={post.comments}/>
			</div>
		</div>
	}

	@style {
		.post-view {
			margin: 0 auto;
			max-width: 60rem;
			padding: 0;
			width: 100%;
		}

		.post-view-container,
		.post-view-comments-container {
			padding: 1rem;
		}

		.post-view-container {
			border-bottom: 1px solid #efefef;
		}

		.post-view-header,
		.post-view-footer {
			font-size: 90%;
			line-height: 1.4;
		}

		.post-view-footer {
			gap: 2rem;
		}

		.post-view-body {
			padding: 1rem 0;
		}

		.post-view-link {
			color: inherit;
			text-decoration: none;
		}

		.post-view-image {
			height: 40px;
			width: 40px;
			border: 1px solid #efefef;
			border-radius: 50%;
			box-shadow: 0 0.2rem 0.4rem #eee;
		}

		.post-view-name {
			font-weight: bold;
		}

		.post-view-url,
		.post-view-time,
		.post-view-footer {
			color: gray;
		}

		.separator {
			margin: 0 0.5rem;
		}

		.post-view-comments-container {
			background-color: #fcfcfc;
			border-radius: var(--brad);
			font-size: 85%;
		}
	}
}
